<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
    <script src="../JQuery.js"></script>
    <style>
        .advance{
            color:red;
            background-color:pink;
        }
    </style>
</head>
<body>
<ul class="play">
    <li class="one">心动小镇</li>
    <li class="two">金铲铲</li>
    <li class="three">王者荣耀</li>
    <li class="four">和平精英</li>
    <li class="five">地铁酷跑</li>
</ul>
<script>
    //添加类名操作
    // console.log(typeof $('ul>li')[0]);
    // console.log(typeof $('ul>li').eq(0))
    // console.log(typeof $('ul>li').eq(0).addClass('one'))
    // console.log($('ul>li').eq(0)) //JQuery对象
    // console.log($('ul>li')[0]) // Dom元素
    //
    // console.log('.two',$('ul>li.two').get(0)) // 获取第一个 two类的元素
    // console.log($('ul>li.class1').get()) // 选中所有类名为class1的元素
    // console.log($('ul>li.class1').eq(0)) // 选中第一个类名为class1的元素（索引从0开始）
    // console.log($('ul>li.class1').get(0).innerText) //innerText、 innerHtml 是Dom元素特有的属性，JQuery没有此类属性
    // console.log($('ul>li.class1').get().innerText) //输出undefined
    // console.log($('ul>li.class1').eq(0).outerText) //输出undefined  outerText是Dom元素的属性
    // console.log($('ul>li.class1').get().outerText) //输出undefined
    // console.log($('ul>li.class1').get(0).outerText) //输出：王者荣耀

    //删除类名操作
    // $('ul>li').removeClass('one')
    // $('ul>li').toggleClass('one') // ‘开关’：类名存在则删除，类名不存在则添加
    /*
    * 特性	var	                        let
    作用域	函数作用域	                块作用域
      提升	提升并初始化为 undefined	    提升但不初始化，TDZ
  重复声明	允许	                        不允许
  * */
    var class_name1 = $('ul>li').attr('class') //attr是JQuery特有的方法
    console.log(typeof class_name1) // string类型
    console.log(class_name1) //如果类名不存在则输出空（不是undefined,是空）

    /*
    * this使用场景：
    *   1、对象方法中的this指向调用该方法的对象
    *   2、事件处理的this指向触发事件的Dom元素
    *   3、构造函数的this元素，指向新创建的实例
    *   4、箭头函数中的this，箭头函数不会绑定自己的this，它会继承外部作用域中的this
    *       eg:
                  const obj = {
                     name: 'John',
                     greet: () => {
                     console.log(`Hello, ${this.name}`);
                     }
                    };
                  obj.greet(); // 输出取决于外部作用域中的 this
          等*/
        $('.play>li').click(function(){
            console.log(this,typeof this) //object类型
            // $('.play>li').removeClass()
            console.log(this.className)
            var pre_class_name = this.className
            $('.play>.'+pre_class_name).addClass('advance')
            $('.paly>.'+pre_class_name).removeClass(pre_class_name)

        })
</script>
</body>
</html>
